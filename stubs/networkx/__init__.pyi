# Minimal NetworkX stub for MFG_PDE strategic typing
# Focus on graph analysis methods used in network MFG problems

from collections.abc import Iterator
from typing import Any

# Core NetworkX types
class Graph:
    def __init__(self, **kwargs: Any) -> None: ...
    def add_node(self, node: Any, **kwargs: Any) -> None: ...
    def add_nodes_from(self, nodes: Any) -> None: ...
    def add_edge(self, u: Any, v: Any, **kwargs: Any) -> None: ...
    def nodes(self, **kwargs: Any) -> Any: ...
    def edges(self, **kwargs: Any) -> Any: ...
    def neighbors(self, node: Any) -> Iterator[Any]: ...
    def degree(self, node: Any = None) -> Any: ...
    def number_of_nodes(self) -> int: ...
    def number_of_edges(self) -> int: ...

class DiGraph(Graph):
    def predecessors(self, node: Any) -> Iterator[Any]: ...
    def successors(self, node: Any) -> Iterator[Any]: ...

# Common NetworkX functions
def shortest_path(G: Graph, source: Any, target: Any, **kwargs: Any) -> list[Any]: ...
def connected_components(G: Graph) -> Iterator[set[Any]]: ...
def strongly_connected_components(G: DiGraph) -> Iterator[set[Any]]: ...

# Catch-all for any missing networkx attributes
def __getattr__(name: str) -> Any: ...
