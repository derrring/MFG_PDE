# Minimal Polars stub for systematic typing methodology
# Provides essential Polars typing without complex syntax issues
# Follows systematic approach: simple, functional stubs over perfect coverage

from collections.abc import Sequence
from pathlib import Path
from typing import Any

# Core Polars types with methods used in MFG_PDE codebase
class DataFrame:
    # Core DataFrame methods
    def select(self, *args, **kwargs) -> DataFrame: ...
    def with_columns(self, *args, **kwargs) -> DataFrame: ...
    def filter(self, *args, **kwargs) -> DataFrame: ...
    def group_by(self, *args, **kwargs) -> Any: ...
    def join(self, *args, **kwargs) -> DataFrame: ...
    def limit(self, n: int) -> DataFrame: ...

    # Properties and inspection methods
    @property
    def shape(self) -> tuple[int, int]: ...
    @property
    def columns(self) -> list[str]: ...
    def head(self, n: int = 5) -> DataFrame: ...
    def describe(self) -> DataFrame: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: str) -> Series: ...

    # Conversion methods
    def to_pandas(self, **kwargs) -> Any: ...
    def to_numpy(self) -> Any: ...
    def to_dict(self, **kwargs) -> dict[str, Any]: ...
    def item(self, row: int = 0, column: str | int = 0) -> Any: ...

    # File I/O
    def write_csv(self, file: str | Path, **kwargs) -> None: ...
    def write_parquet(self, file: str | Path, **kwargs) -> None: ...

class LazyFrame:
    def select(self, *args, **kwargs) -> LazyFrame: ...
    def with_columns(self, *args, **kwargs) -> LazyFrame: ...
    def filter(self, *args, **kwargs) -> LazyFrame: ...
    def group_by(self, *args, **kwargs) -> Any: ...
    def collect(self, **kwargs) -> DataFrame: ...

class Series:
    def to_list(self) -> list[Any]: ...
    def sum(self) -> Any: ...
    def mean(self) -> Any: ...
    def first(self) -> Any: ...
    def last(self) -> Any: ...

class Expr:
    # Basic transformations
    def alias(self, name: str) -> Expr: ...

    # Aggregation methods
    def sum(self) -> Expr: ...
    def mean(self) -> Expr: ...
    def std(self) -> Expr: ...
    def min(self) -> Expr: ...
    def max(self) -> Expr: ...
    def count(self) -> Expr: ...

    # Other methods used in codebase
    def first(self) -> Expr: ...
    def last(self) -> Expr: ...

# Essential functions
def read_csv(file: str | Path, **kwargs) -> DataFrame: ...
def read_parquet(file: str | Path, **kwargs) -> DataFrame: ...
def concat(items: Sequence[DataFrame], **kwargs) -> DataFrame: ...
def col(name: str) -> Expr: ...
def corr(col1: str, col2: str, **kwargs) -> Expr: ...
def lit(value: Any) -> Expr: ...

# Catch-all for any missing attributes
def __getattr__(name: str) -> Any: ...
