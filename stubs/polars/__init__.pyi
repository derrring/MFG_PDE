# Minimal Polars stub for systematic typing methodology
# Provides essential Polars typing without complex syntax issues
# Follows systematic approach: simple, functional stubs over perfect coverage

from typing import Any, Sequence
from pathlib import Path

# Core Polars types with basic methods
class DataFrame:
    def select(self, *args, **kwargs) -> DataFrame: ...
    def with_columns(self, *args, **kwargs) -> DataFrame: ...
    def filter(self, *args, **kwargs) -> DataFrame: ...
    def group_by(self, *args, **kwargs) -> Any: ...
    def join(self, *args, **kwargs) -> DataFrame: ...
    def write_csv(self, file: str | Path, **kwargs) -> None: ...
    def write_parquet(self, file: str | Path, **kwargs) -> None: ...
    def to_pandas(self, **kwargs) -> Any: ...

class LazyFrame:
    def select(self, *args, **kwargs) -> LazyFrame: ...
    def with_columns(self, *args, **kwargs) -> LazyFrame: ...
    def filter(self, *args, **kwargs) -> LazyFrame: ...
    def group_by(self, *args, **kwargs) -> Any: ...
    def collect(self, **kwargs) -> DataFrame: ...

class Series:
    def to_list(self) -> list[Any]: ...
    def sum(self) -> Any: ...
    def mean(self) -> Any: ...
    def first(self) -> Any: ...
    def last(self) -> Any: ...

class Expr:
    def alias(self, name: str) -> Expr: ...
    def sum(self) -> Expr: ...
    def mean(self) -> Expr: ...
    def std(self) -> Expr: ...

# Essential functions
def read_csv(file: str | Path, **kwargs) -> DataFrame: ...
def read_parquet(file: str | Path, **kwargs) -> DataFrame: ...
def concat(items: Sequence[DataFrame], **kwargs) -> DataFrame: ...
def col(name: str) -> Expr: ...

# Catch-all for any missing attributes
def __getattr__(name: str) -> Any: ...