# Minimal OmegaConf stub for MFG_PDE strategic typing
# Focus on configuration management methods used in config modules

from typing import Any

class DictConfig:
    def __init__(self, content: Any = None, **kwargs: Any) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __contains__(self, key: str) -> bool: ...
    def __getattr__(self, name: str) -> Any: ...  # For attribute access like config.problem
    def get(self, key: str, default: Any = None) -> Any: ...
    def update(self, other: Any) -> None: ...
    def merge_with(self, other: Any) -> DictConfig: ...

class ListConfig:
    def __init__(self, content: Any = None, **kwargs: Any) -> None: ...
    def append(self, item: Any) -> None: ...
    def __getitem__(self, index: int) -> Any: ...

# Core OmegaConf functions
def create(config: Any) -> DictConfig | ListConfig: ...
def load(file: str) -> DictConfig: ...
def save(config: DictConfig | ListConfig, file: str) -> None: ...
def merge(config1: Any, config2: Any) -> DictConfig: ...
def structured(obj: Any) -> DictConfig: ...

# Catch-all for any missing omegaconf attributes
def __getattr__(name: str) -> Any: ...
