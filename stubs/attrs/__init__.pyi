# Minimal attrs stub for MFG_PDE strategic typing
# Focus on dataclass-style decorators and functions

from collections.abc import Callable
from typing import Any, TypeVar

T = TypeVar("T")

# Core attrs decorators
def define(**kwargs: Any) -> Callable[[type[T]], type[T]]: ...
def frozen(**kwargs: Any) -> Callable[[type[T]], type[T]]: ...

# Field definition
def field(**kwargs: Any) -> Any: ...

# Conversion and validation
def converters(**kwargs: Any) -> Any: ...
def validators(**kwargs: Any) -> Any: ...

# Utility functions
def asdict(inst: Any, **kwargs: Any) -> dict[str, Any]: ...
def astuple(inst: Any, **kwargs: Any) -> tuple[Any, ...]: ...

# Catch-all for any missing attrs attributes
def __getattr__(name: str) -> Any: ...
