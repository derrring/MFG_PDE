# Minimal gmsh stub for MFG_PDE strategic typing
# Focus on methods actually used in geometry modules

from typing import Any

# Core gmsh functions used in MFG_PDE
def initialize() -> None: ...
def clear() -> None: ...
def finalize() -> None: ...

# Gmsh model namespace
class ModelModule:
    def add(self, name: str) -> None: ...
    def getEntities(self, dim: int) -> list[tuple[int, int]]: ...

    # Geometry namespace
    class GeoModule:
        def addPoint(self, x: float, y: float, z: float) -> int: ...
        def addLine(self, start: int, end: int) -> int: ...
        def addCircleArc(self, start: int, center: int, end: int) -> int: ...
        def addCurveLoop(self, curves: list[int]) -> int: ...
        def addPlaneSurface(self, curves: list[int]) -> int: ...
        def synchronize(self) -> None: ...

    geo: GeoModule

    # Mesh namespace
    class MeshModule:
        def generate(self, dim: int) -> None: ...
        def getNodes(self) -> tuple[Any, Any, Any]: ...
        def getElements(self) -> tuple[Any, Any, Any]: ...
        def optimize(self, method: str) -> None: ...

    mesh: MeshModule

    # OCC namespace for CAD
    class OccModule:
        def importShapes(self, filename: str) -> None: ...
        def synchronize(self) -> None: ...
        def cut(self, objects: list[tuple[int, int]], tools: list[tuple[int, int]]) -> tuple[list[Any], list[Any]]: ...

    occ: OccModule

    def addPhysicalGroup(self, dim: int, entities: list[int], tag: int) -> None: ...

model: ModelModule

# Option namespace
class OptionModule:
    def setNumber(self, option: str, value: float) -> None: ...

option: OptionModule

# Catch-all for any missing gmsh attributes
def __getattr__(name: str) -> Any: ...
