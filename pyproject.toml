# pyproject.toml

[build-system]
requires = ["setuptools>=61.0"] # Minimum version of setuptools
build-backend = "setuptools.build_meta"
#backend-path = ["."] # Optional: If you have a custom build backend, you can specify it here.
# Optional: If you want to use PEP 517/518, you can specify the backend requirements here.

[project]
name = "mfg_pde"
version = "0.1.0" # Start with an initial version
authors = [
    { name = "Jiongyi Wang", email = "jiongyiwang@gmail.com" },
    # et al.
]
description = "A comprehensive Python framework for solving Mean Field Games with advanced numerical methods, interactive visualizations, and professional research tools."
readme = "README.md" 
requires-python = ">=3.8" 
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License", 
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Mathematics",
]
dependencies = [
    "numpy>=1.21",  # Support NumPy 1.21+ with trapezoid fallback via scipy
    "scipy>=1.7",   # Required for trapezoid integration when NumPy < 2.0
    "matplotlib>=3.4",
    "plotly>=5.0",
    "nbformat>=5.0",
    "jupyter>=1.0",
    "tqdm>=4.0",  # For progress bars
    "pydantic>=2.0,<3.0",  # Data validation and serialization (v2)
    "igraph>=0.10.0",  # Primary network backend (C-based, fast)
]

# Optional dependencies for development and advanced features
[project.optional-dependencies]
dev = [
    "mypy>=1.0",
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "isort>=5.0",
    "pre-commit>=2.0",
]
typing = [
    "types-tqdm",
    "types-setuptools", 
    "types-psutil",
]
performance = [
    "numba>=0.56",
    "dask[complete]>=2022.0",
    "networkit>=10.0",  # Large-scale network performance
]
networks = [
    "networkit>=10.0",   # Large-scale networks (parallel algorithms)
    "networkx>=3.0",     # Comprehensive algorithm library
    "graph-tool>=2.45",  # Ultimate performance (optional)
]
jax = [
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "optax>=0.1.0",
]
jax-cuda = [
    "jax[cuda12_pip]>=0.4.0",
    "optax>=0.1.0",
]
advanced = [
    "colorlog>=6.0",
    "hypothesis>=6.0",
]

# Optional: URLs for your project
[project.urls]
Homepage = "https://github.com/derrring/MFG_PDE" 
Repository = "https://github.com/derrring/MFG_PDE"
# Bug-Tracker = "https://github.com/derrring/MFG_PDE/issues"

# Command-line scripts
[project.scripts]

# --- Setuptools specific configuration ---
# This tells setuptools to automatically find packages in the current directory.
# If your package `mfg_pde` is directly in the root of your project (alongside pyproject.toml),
# this is usually sufficient.
# If `mfg_pde` is inside a `src` directory (e.g., `src/mfg_pde`), you would adjust `where`.
[tool.setuptools.packages.find]
where = ["."]  # Look for packages in the current directory.
include = ["mfg_pde*"]  # Include the mfg_pde package and its subpackages
exclude = ["examples*", "tests*", "benchmarks*", "docs*", "archive*"] # Exclude non-package directories from installation

# Optional: If you have data files to include with your package
# [tool.setuptools.package-data]
# "mfg_pde.some_submodule" = ["*.dat"]

# =============================================================================
# Code Quality and Development Tools Configuration
# =============================================================================

[tool.black]
line-length = 120
target-version = ['py310']
skip-string-normalization = true
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | archive
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
known_first_party = ["mfg_pde"]
known_scientific = ["numpy", "scipy", "matplotlib", "plotly", "jax", "jaxlib"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "SCIENTIFIC", "FIRSTPARTY", "LOCALFOLDER"]
# Removed force_alphabetical_sort_within_sections for scientific code readability

[tool.mypy]
python_version = "3.10"
warn_return_any = false  # Relaxed for scientific code with NumPy operations
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable during transition
ignore_missing_imports = true
allow_untyped_calls = true  # Scientific libraries often lack complete type stubs
allow_incomplete_defs = true  # Research code flexibility
exclude = [
    "archive/",
    "build/",
    "dist/"
]

# Mathematical variables are allowed to be single letters
[[tool.mypy.overrides]]
module = "mfg_pde.*"
# Allow mathematical notation like U, M, Nx, Nt
disable_error_code = "name-defined"

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name (allow mathematical notation)
    "R0913",  # Too many arguments (common in scientific computing)
    "R0914",  # Too many local variables
    "R0902",  # Too many instance attributes
    "R0903",  # Too few public methods
    "C0415",  # Import outside top-level
    "R0915",  # Too many statements (complex algorithms)
    "R0912",  # Too many branches (mathematical logic)
    "W0613",  # Unused argument (callback signatures)
    "R0801",  # Similar lines (mathematical patterns)
    "C0301",  # Line too long (handled by Black)
]

[tool.pylint.format]
max-line-length = 120
good-names = [
    "i", "j", "k",           # Loop indices
    "x", "y", "z", "t",      # Coordinates and time
    "U", "M",                # MFG solution variables
    "dx", "dt", "Dx", "Dt",  # Grid spacing
    "Nx", "Nt",              # Grid dimensions
    "fp", "hjb",             # Equation types
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=mfg_pde",
    "--cov-report=term-missing",
    "--cov-report=html",
    "-x",  # Stop on first failure for faster debugging
    "--tb=short",  # Shorter tracebacks
]

[tool.coverage.run]
source = ["mfg_pde"]
omit = [
    "*/tests/*",
    "*/archive/*",
    "*/__pycache__/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
