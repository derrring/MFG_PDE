name: Security Scanning Pipeline
#
# Cost-optimized workflow: Manual triggers only to reduce GitHub Actions usage
#
# To run manually:
# 1. Go to GitHub repo ‚Üí Actions tab ‚Üí "Security Scanning Pipeline"
# 2. Click "Run workflow" ‚Üí Select branch ‚Üí Run
#
# Automatically runs on releases for security validation

on:
  workflow_dispatch:  # Manual trigger only to reduce costs
  release:
    types: [published]  # Run security scans on releases

env:
  PYTHON_VERSION: '3.12'  # Package requires Python >=3.12

jobs:
  dependency-scanning:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep pip-audit
        pip install -e .[dev,test]

    - name: Run Safety (dependency vulnerability scan)
      run: |
        echo "üîç Scanning dependencies for known vulnerabilities..."
        safety check --json --output safety-report.json || true
        safety check --short-report
      continue-on-error: true

    - name: Run pip-audit (comprehensive dependency audit)
      run: |
        echo "üîç Running comprehensive dependency audit..."
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --desc
      continue-on-error: true

    - name: Parse dependency scan results
      run: |
        python .github/scripts/parse_security_results.py dependency

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v5
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json
          dependency-summary.md
        retention-days: 30

  static-code-analysis:
    name: Static Code Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] semgrep
        pip install -e .[dev]

    - name: Run Bandit (Python security linter)
      run: |
        echo "üîç Running Bandit security analysis..."
        bandit -r mfg_pde/ -f json -o bandit-report.json || true
        bandit -r mfg_pde/ -f txt
      continue-on-error: true

    - name: Run Semgrep (multi-language static analysis)
      run: |
        echo "üîç Running Semgrep security analysis..."
        semgrep --config=auto --json --output=semgrep-report.json mfg_pde/ || true
        semgrep --config=auto --text mfg_pde/
      continue-on-error: true

    - name: Custom security checks
      run: |
        echo "üîç Running custom security checks..."
        python .github/scripts/custom_security_checks.py

    - name: Parse static analysis results
      run: |
        python .github/scripts/parse_security_results.py static

    - name: Upload static analysis results
      uses: actions/upload-artifact@v5
      if: always()
      with:
        name: static-analysis-results
        path: |
          bandit-report.json
          semgrep-report.json
          custom-security-report.json
          static-analysis-summary.md
        retention-days: 30

  secrets-scanning:
    name: Secrets and Sensitive Data Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for secret scanning

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install secret scanning tools
      run: |
        pip install detect-secrets gitpython
        # Install truffleHog
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

    - name: Run detect-secrets
      run: |
        echo "üîç Scanning for secrets with detect-secrets..."
        detect-secrets scan --all-files --baseline .secrets.baseline mfg_pde/ || true
        detect-secrets audit .secrets.baseline || true

    - name: Run TruffleHog
      run: |
        echo "üîç Scanning for secrets with TruffleHog..."
        trufflehog git file://. --json > trufflehog-report.json || true
        echo "TruffleHog scan completed"

    - name: Custom secrets scan
      run: |
        echo "üîç Running custom secrets detection..."
        python .github/scripts/custom_secrets_scan.py

    - name: Parse secrets scan results
      run: |
        python .github/scripts/parse_security_results.py secrets

    - name: Upload secrets scan results
      uses: actions/upload-artifact@v5
      if: always()
      with:
        name: secrets-scan-results
        path: |
          .secrets.baseline
          trufflehog-report.json
          custom-secrets-report.json
          secrets-summary.md
        retention-days: 30

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      run: |
        echo "üèóÔ∏è Building Docker image for security scanning..."
        docker build -t mfg-pde-security-scan:latest .

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: Run Trivy vulnerability scan
      run: |
        echo "üîç Scanning container for vulnerabilities..."
        trivy image --format json --output trivy-report.json mfg-pde-security-scan:latest || true
        trivy image --format table mfg-pde-security-scan:latest

    - name: Install and run Hadolint (Dockerfile linter)
      run: |
        echo "üîç Linting Dockerfile with Hadolint..."
        wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
        chmod +x hadolint
        ./hadolint Dockerfile > hadolint-report.txt || true
        cat hadolint-report.txt

    - name: Container configuration security check
      run: |
        echo "üîç Checking container configuration security..."
        python .github/scripts/container_security_check.py

    - name: Parse container scan results
      run: |
        python .github/scripts/parse_security_results.py container

    - name: Upload container scan results
      uses: actions/upload-artifact@v5
      if: always()
      with:
        name: container-scan-results
        path: |
          trivy-report.json
          hadolint-report.txt
          container-security-report.json
          container-summary.md
        retention-days: 30

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install license checking tools
      run: |
        pip install pip-licenses licensecheck
        pip install -e .[dev]

    - name: Run license compliance check
      run: |
        echo "üìã Checking license compliance..."
        pip-licenses --format=json --output-file=license-report.json || true
        pip-licenses --format=plain-vertical

    - name: Custom license compliance check
      run: |
        echo "üìã Running custom license compliance checks..."
        python .github/scripts/license_compliance_check.py

    - name: Parse license results
      run: |
        python .github/scripts/parse_security_results.py license

    - name: Upload license compliance results
      uses: actions/upload-artifact@v5
      if: always()
      with:
        name: license-compliance-results
        path: |
          license-report.json
          license-compliance-report.json
          license-summary.md
        retention-days: 30

  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-scanning, static-code-analysis, secrets-scanning, container-security, license-compliance]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Download all scan results
      uses: actions/download-artifact@v6

    - name: Generate comprehensive security report
      run: |
        echo "üìä Generating comprehensive security report..."
        python .github/scripts/generate_security_report.py

    - name: Upload comprehensive security report
      uses: actions/upload-artifact@v5
      with:
        name: comprehensive-security-report
        path: |
          security-dashboard.html
          security-summary.md
          security-findings.json
        retention-days: 90

    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v8
      with:
        script: |
          const fs = require('fs');
          const summaryPath = 'security-summary.md';

          if (fs.existsSync(summaryPath)) {
            const summary = fs.readFileSync(summaryPath, 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîí Security Scan Summary\n\n${summary}`
            });
          }

    - name: Fail job if critical vulnerabilities found
      run: |
        echo "üîç Checking for critical security issues..."
        python .github/scripts/check_critical_issues.py

        # This script will exit with non-zero code if critical issues are found
        # Critical issues include:
        # - High/Critical severity vulnerabilities in dependencies
        # - Hardcoded secrets or credentials
        # - Critical security anti-patterns in code
        # - License compliance violations for production dependencies
